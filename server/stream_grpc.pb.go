// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: stream.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamServerClient is the client API for StreamServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamServerClient interface {
	RunDemo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	Download(ctx context.Context, in *DownRequest, opts ...grpc.CallOption) (StreamServer_DownloadClient, error)
	DownloadNormal(ctx context.Context, in *DownRequest, opts ...grpc.CallOption) (*DownReply, error)
}

type streamServerClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamServerClient(cc grpc.ClientConnInterface) StreamServerClient {
	return &streamServerClient{cc}
}

func (c *streamServerClient) RunDemo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/stream.StreamServer/RunDemo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServerClient) Download(ctx context.Context, in *DownRequest, opts ...grpc.CallOption) (StreamServer_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamServer_ServiceDesc.Streams[0], "/stream.StreamServer/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServerDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamServer_DownloadClient interface {
	Recv() (*DownReply, error)
	grpc.ClientStream
}

type streamServerDownloadClient struct {
	grpc.ClientStream
}

func (x *streamServerDownloadClient) Recv() (*DownReply, error) {
	m := new(DownReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamServerClient) DownloadNormal(ctx context.Context, in *DownRequest, opts ...grpc.CallOption) (*DownReply, error) {
	out := new(DownReply)
	err := c.cc.Invoke(ctx, "/stream.StreamServer/DownloadNormal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamServerServer is the server API for StreamServer service.
// All implementations must embed UnimplementedStreamServerServer
// for forward compatibility
type StreamServerServer interface {
	RunDemo(context.Context, *Request) (*Reply, error)
	Download(*DownRequest, StreamServer_DownloadServer) error
	DownloadNormal(context.Context, *DownRequest) (*DownReply, error)
	mustEmbedUnimplementedStreamServerServer()
}

// UnimplementedStreamServerServer must be embedded to have forward compatible implementations.
type UnimplementedStreamServerServer struct {
}

func (UnimplementedStreamServerServer) RunDemo(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunDemo not implemented")
}
func (UnimplementedStreamServerServer) Download(*DownRequest, StreamServer_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedStreamServerServer) DownloadNormal(context.Context, *DownRequest) (*DownReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadNormal not implemented")
}
func (UnimplementedStreamServerServer) mustEmbedUnimplementedStreamServerServer() {}

// UnsafeStreamServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamServerServer will
// result in compilation errors.
type UnsafeStreamServerServer interface {
	mustEmbedUnimplementedStreamServerServer()
}

func RegisterStreamServerServer(s grpc.ServiceRegistrar, srv StreamServerServer) {
	s.RegisterService(&StreamServer_ServiceDesc, srv)
}

func _StreamServer_RunDemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServerServer).RunDemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream.StreamServer/RunDemo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServerServer).RunDemo(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamServer_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServerServer).Download(m, &streamServerDownloadServer{stream})
}

type StreamServer_DownloadServer interface {
	Send(*DownReply) error
	grpc.ServerStream
}

type streamServerDownloadServer struct {
	grpc.ServerStream
}

func (x *streamServerDownloadServer) Send(m *DownReply) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamServer_DownloadNormal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServerServer).DownloadNormal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream.StreamServer/DownloadNormal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServerServer).DownloadNormal(ctx, req.(*DownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamServer_ServiceDesc is the grpc.ServiceDesc for StreamServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stream.StreamServer",
	HandlerType: (*StreamServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunDemo",
			Handler:    _StreamServer_RunDemo_Handler,
		},
		{
			MethodName: "DownloadNormal",
			Handler:    _StreamServer_DownloadNormal_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Download",
			Handler:       _StreamServer_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "stream.proto",
}
